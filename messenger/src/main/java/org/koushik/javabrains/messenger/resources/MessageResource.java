package org.koushik.javabrains.messenger.resources;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import javax.ws.rs.BeanParam;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriInfo;

import org.koushik.javabrains.messenger.exception.DataNotFoundException;
import org.koushik.javabrains.messenger.model.Message;
import org.koushik.javabrains.messenger.resources.bean.MessageFilterBean;

//import javax.xml.bind.annotation.XmlRootElement;

import org.koushik.javabrains.messenger.service.MessageService;



/**
 * www.tutorialspoint.com/restful/restful_jax_rs.htm
 * Specification
Following are the commonly used annotations to map a resource as a web service resource.

S.N.	Annotation & Description
1	@Path
Relative path of the resource class/method.
2	@GET
HTTP Get request, used to fetch resource.
3	@PUT
HTTP PUT request, used to create resource.
4	@POST
HTTP POST request, used to create/update resource.
5	@DELETE
HTTP DELETE request, used to delete resource.
6	@HEAD
HTTP HEAD request, used to get status of method availability.
7	@Produces
States the HTTP Response generated by web service, for example APPLICATION/XML, TEXT/HTML, APPLICATION/JSON etc.
8	@Consumes
States the HTTP Request type, for example application/x-www-form-urlencoded to accept form data in HTTP body during POST request.
9	@PathParam
Binds the parameter passed to method to a value in path.
10	@QueryParam
Binds the parameter passed to method to a query parameter in path.
11	@MatrixParam
Binds the parameter passed to method to a HTTP matrix parameter in path.
12	@HeaderParam
Binds the parameter passed to method to a HTTP header.
13	@CookieParam
Binds the parameter passed to method to a Cookie.
14	@FormParam
Binds the parameter passed to method to a form value.
15	@DefaultValue
Assigns a default value to a parameter passed to method.
16	@Context
Context of the resource for example HTTPRequest as a context.
 * 
 * 
 **/



@Path("/messages")
// If all the method use same @Consumes and Produces then we can annotate it at Class level 
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class MessageResource {
	
	@Path("{messageId}/comments")
	public CommentResource getCommentResource() {
		return new CommentResource();
	}
	

//	@GET
//	@Produces(MediaType.TEXT_PLAIN)
//	public String getMessages() {
//		return "Hello World";
//	}
	
	/**
	 * 2.14 The Param Annotations
	 * In this tutorial, you'll learn about a few more Param annotations that inject request values into resource methods.
	 * https://javabrains.io/courses/javaee_jaxrs/lessons/The-Param-Annotations
	 */
	MessageService messageService = new MessageService();
	
	/** 
	 * 2.15 Using Context And BeanParam Annotations
     * In this tutorial, we'll cover a few more ways to have request information injected into resource methods. We'll look at Context and BeanParam annotations.
	 * https://javabrains.io/courses/javaee_jaxrs/lessons/Using-Context-And-BeanParam-Annotations
	 */
	@GET
	// 2.4 Creating A Resource
	// In this tutorial, we'll create our first JAX-RS resource that handles a GET request to an API URL.
	// https://javabrains.io/courses/javaee_jaxrs/lessons/Creating-A-Resource
	
	// 2.5 Returning XML Response
	// Let's return some data in XML format from the resource. We'll update the MessageResource to return a list of Messages in XML.
	// https://javabrains.io/courses/javaee_jaxrs/lessons/Returning-Xml-Response
	// for application xml annotate model message.java with @XmlRootElement
	// Jaxb comes along with Java so we don't need any extra configuration
	
	///  @Produces(MediaType.APPLICATION_XML)
	
	/**2.9 Returning JSON Response
	// We'll now switch the response format of the APIs from XML to JSON.
	// https://javabrains.io/courses/javaee_jaxrs/lessons/Returning-JSON-Response
	// but for json we need to add the jar i.e jersey-media-moxy to application class path 
	// there is an class messageBodyWrite which does object to json conversion
	/// Moved to class level @Produces(MediaType.APPLICATION_JSON)
	 * 
	 */
//	public List<Message> getMessages() {
//		return messageService.getAllMessages();
//	}
	
	/** 2.13 Pagination And Filtering
	In this tutorial, we'll learn how to implement pagination and filtering features in REST APIs.
	https://javabrains.io/courses/javaee_jaxrs/lessons/Pagination-And-Filtering
	**/
 /*	
	public List<Message> getMessages(
			@QueryParam ("year") int year,
			@QueryParam ("start") int start,
			@QueryParam ("size") int size
			) {
		
		if(year > 0 ) {
			return messageService.getAllMessagesForanYear(year);
		} 
		
		// TODO : correct logic
		if( start >= 0 && size > 0) {
			return messageService.getAllMessagesPaginated(start, size);
		}
		return messageService.getAllMessages();
	}
	*/
	
	/* 
	 * 2.15 Using Context And BeanParam Annotations
	*	In this tutorial, we'll cover a few more ways to have request information injected into resource methods
 	*	We'll look at Context and BeanParam annotations.
 	* https://javabrains.io/courses/javaee_jaxrs/lessons/Using-Context-And-BeanParam-Annotations	
	 */
	public List<Message> getMessages(
			@BeanParam MessageFilterBean filterBean
			) {
		
		if(filterBean.getYear() > 0 ) {
			return messageService.getAllMessagesForanYear(filterBean.getYear());
		} 
		
		// TODO : correct logic
		if( filterBean.getStart() >= 0 && filterBean.getSize() > 0) {
			return messageService.getAllMessagesPaginated(filterBean.getStart(), filterBean.getSize());
		}
		return messageService.getAllMessages();
	}
	
	//use path param to get only one message
	@GET
	@Path("/{messageId}")
	// explain above 
	//@Produces(MediaType.APPLICATION_XML)
	//2.8 Accessing Path Params
	// In this tutorial, you'll learn how to access and map to URL with path parameters, using the @PathParam annotation.
	// https://javabrains.io/courses/javaee_jaxrs/lessons/Accessing-Path-Params
	/// Moved to class level @Produces(MediaType.APPLICATION_JSON)
	public Message getMessage( @PathParam("messageId")  long id) {
		return  messageService.getMessage(id);
		
	}
	
	//2.10 Implementing POST Method
	// In this tutorial, we'll implement the POST method API to create new instances of Message resource.
	// https://javabrains.io/courses/javaee_jaxrs/lessons/Implementing-POST-Method
	
	@POST
	/*Also include annotation @Consumes 
	/// Moved to class level @Consumes(MediaType.APPLICATION_JSON)
	/// Moved to class level @Produces(MediaType.APPLICATION_JSON)
	// Jersey will use jersey-media-moxy to convert Json to object
	*/
	/*
	public Message addMessage(  Message message) {
		return messageService.addMessage(message);
	}
	*/
	
	/*
	 * 2.17 Sending Status Codes and Location Headers
	* Learn how to send status codes and location headers from REST APIs. 
	* We'll update the create API to send the 201 status code and the Location header.
	* https://javabrains.io/courses/javaee_jaxrs/lessons/Sending-Status-Codes-and-Location-Headers
	 * */
	
	public Response addMessage(  Message message , @Context UriInfo uriInfo) throws URISyntaxException {
		Message newMessage = messageService.addMessage(message);
		String newId = String.valueOf(newMessage.getId());
		URI uri = uriInfo.getAbsolutePathBuilder().path(newId).build();
		//return Response.status(Status.CREATED)
		//return Response.created(new URI("messenger/webapi/messages/" + newMessage.getId()) )
		
		return Response.created(uri )
		.entity( newMessage)
		.build();
	}
	
	//2.11 Implementing Update and Delete
	// We'll now implement update and delete APIs with the PUT and DELETE methods respectively.
	// https://javabrains.io/courses/javaee_jaxrs/lessons/Implementing-Update-And-Delete
	@PUT
	@Path("/{messageId}")
	/// Moved to class level @Consumes(MediaType.APPLICATION_JSON)
	/// Moved to class level @Produces(MediaType.APPLICATION_JSON)
	public Message updateMessage( @PathParam("messageId")  long id, Message message) {
		message.setId(id);
		return messageService.updateMessage(message);
	}
	
	// Consumes is not requesd as it takes only id
	// it doesn't return anything so return type is void
	@DELETE
	@Path("/{messageId}")
	/// Moved to class level @Produces(MediaType.APPLICATION_JSON)
	public void removeMessage( @PathParam("messageId")  long id) {
		 messageService.removeMessage(id);
	}
}
